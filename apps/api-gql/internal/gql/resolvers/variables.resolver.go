package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/guregu/null"
	model "github.com/satont/twir/libs/gomodels"
	"github.com/twirapp/twir/apps/api-gql/internal/gql/gqlmodel"
)

// VariablesCreate is the resolver for the variablesCreate field.
func (r *mutationResolver) VariablesCreate(ctx context.Context, opts gqlmodel.VariableCreateInput) (*gqlmodel.Variable, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	entity := model.ChannelsCustomvars{
		ID:          uuid.NewString(),
		Name:        opts.Name,
		Description: null.StringFromPtr(opts.Description.Value()),
		Type:        model.CustomVarType(opts.Type),
		EvalValue:   opts.EvalValue,
		Response:    opts.Response,
		ChannelID:   dashboardId,
	}

	if err := r.gorm.
		WithContext(ctx).
		Create(&entity).Error; err != nil {
		return nil, err
	}

	return &gqlmodel.Variable{
		ID:          entity.ID,
		Name:        entity.Name,
		Description: entity.Description.Ptr(),
		Type:        gqlmodel.VariableType(entity.Type),
		EvalValue:   entity.EvalValue,
		Response:    entity.Response,
	}, nil
}

// VariablesUpdate is the resolver for the variablesUpdate field.
func (r *mutationResolver) VariablesUpdate(ctx context.Context, id string, opts gqlmodel.VariableUpdateInput) (*gqlmodel.Variable, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	entity := model.ChannelsCustomvars{}
	if err := r.gorm.
		WithContext(ctx).
		Where(`"channelId" = ? AND id = ?`, dashboardId, id).
		First(&entity).Error; err != nil {
		return nil, err
	}

	if opts.Name.IsSet() {
		entity.Name = *opts.Name.Value()
	}

	if opts.Description.IsSet() {
		entity.Description = null.StringFromPtr(opts.Description.Value())
	}

	if opts.Type.IsSet() {
		entity.Type = model.CustomVarType(*opts.Type.Value())
	}

	if opts.EvalValue.IsSet() {
		entity.EvalValue = *opts.EvalValue.Value()
	}

	if opts.Response.IsSet() {
		entity.Response = *opts.Response.Value()
	}

	if err := r.gorm.
		WithContext(ctx).
		Save(&entity).Error; err != nil {
		return nil, err
	}

	return &gqlmodel.Variable{
		ID:          entity.ID,
		Name:        entity.Name,
		Description: entity.Description.Ptr(),
		Type:        gqlmodel.VariableType(entity.Type),
		EvalValue:   entity.EvalValue,
		Response:    entity.Response,
	}, nil
}

// VariablesDelete is the resolver for the variablesDelete field.
func (r *mutationResolver) VariablesDelete(ctx context.Context, id string) (bool, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	entity := model.ChannelsCustomvars{}
	if err := r.gorm.
		WithContext(ctx).
		Where(`"channelId" = ? AND id = ?`, dashboardId, id).
		First(&entity).Error; err != nil {
		return false, err
	}

	if err := r.gorm.
		WithContext(ctx).
		Delete(&entity).Error; err != nil {
		return false, err
	}

	return true, nil
}

// Variables is the resolver for the variables field.
func (r *queryResolver) Variables(ctx context.Context) ([]gqlmodel.Variable, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	var entities []model.ChannelsCustomvars
	if err := r.gorm.
		WithContext(ctx).
		Where(`"channelId" = ?`, dashboardId).
		Find(&entities).Error; err != nil {
		return nil, err
	}

	var result []gqlmodel.Variable
	for _, e := range entities {
		result = append(
			result, gqlmodel.Variable{
				ID:          e.ID,
				Name:        e.Name,
				Description: e.Description.Ptr(),
				Type:        gqlmodel.VariableType(e.Type),
				EvalValue:   e.EvalValue,
				Response:    e.Response,
			},
		)
	}

	return result, nil
}

// VariablesBuiltIn is the resolver for the variablesBuiltIn field.
func (r *queryResolver) VariablesBuiltIn(ctx context.Context) ([]gqlmodel.BuiltInVariable, error) {
	vars, err := r.twirBus.Parser.GetBuiltInVariables.Request(ctx, struct{}{})
	if err != nil {
		return nil, fmt.Errorf("cannot get built-in variables: %w", err)
	}

	result := make([]gqlmodel.BuiltInVariable, 0, len(vars.Data))
	for _, v := range vars.Data {
		result = append(
			result,
			gqlmodel.BuiltInVariable{
				Name:                v.Name,
				Description:         v.Description,
				Example:             v.Example,
				Visible:             v.Visible,
				CanBeUsedInRegistry: v.CanBeUsedInRegistry,
			},
		)
	}

	return result, nil
}
