package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	model "github.com/satont/twir/libs/gomodels"
	"github.com/twirapp/twir/apps/api-gql/internal/gql/gqlmodel"
)

// CommandsGroupsCreate is the resolver for the commandsGroupsCreate field.
func (r *mutationResolver) CommandsGroupsCreate(ctx context.Context, opts gqlmodel.CommandsGroupsCreateOpts) (bool, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	entity := model.ChannelCommandGroup{
		ID:        uuid.NewString(),
		ChannelID: dashboardId,
		Name:      opts.Name,
		Color:     opts.Color,
	}

	if err := r.gorm.WithContext(ctx).Create(&entity).Error; err != nil {
		return false, err
	}

	return true, nil
}

// CommandsGroupsUpdate is the resolver for the commandsGroupsUpdate field.
func (r *mutationResolver) CommandsGroupsUpdate(ctx context.Context, id string, opts gqlmodel.CommandsGroupsUpdateOpts) (bool, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	entity := model.ChannelCommandGroup{}
	if err := r.gorm.
		WithContext(ctx).
		Where(`id = ? AND "channelId" = ?`, id, dashboardId).
		First(&entity).
		Error; err != nil {
		return false, fmt.Errorf("group not found: %w", err)
	}

	if opts.Name.IsSet() {
		entity.Name = *opts.Name.Value()
	}

	if opts.Color.IsSet() {
		entity.Color = *opts.Color.Value()
	}

	if err := r.gorm.WithContext(ctx).Save(&entity).Error; err != nil {
		return false, err
	}

	return true, nil
}

// CommandsGroupsRemove is the resolver for the commandsGroupsRemove field.
func (r *mutationResolver) CommandsGroupsRemove(ctx context.Context, id string) (bool, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	entity := model.ChannelCommandGroup{}
	if err := r.gorm.
		WithContext(ctx).
		Where(`id = ? AND "channelId" = ?`, id, dashboardId).
		First(&entity).
		Error; err != nil {
		return false, fmt.Errorf("group not found: %w", err)
	}

	if err := r.gorm.
		WithContext(ctx).
		Delete(&entity).
		Error; err != nil {
		return false, err
	}

	return true, nil
}

// CommandsGroups is the resolver for the commandsGroups field.
func (r *queryResolver) CommandsGroups(ctx context.Context) ([]gqlmodel.CommandGroup, error) {
	dashboardId, err := r.sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	var entities []model.ChannelCommandGroup
	if err := r.gorm.
		WithContext(ctx).
		Where(`"channelId" = ?`, dashboardId).
		Find(&entities).
		Error; err != nil {
		return nil, err
	}

	var result []gqlmodel.CommandGroup
	for _, entity := range entities {
		result = append(
			result, gqlmodel.CommandGroup{
				ID:    entity.ID,
				Name:  entity.Name,
				Color: entity.Color,
			},
		)
	}

	return result, nil
}
