package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"cmp"
	"context"
	"slices"

	data_loader "github.com/twirapp/twir/apps/api-gql/internal/gql/data-loader"
	"github.com/twirapp/twir/apps/api-gql/internal/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/gql/graph"
)

// TtsSettings is the resolver for the ttsSettings field.
func (r *queryResolver) TtsSettings(ctx context.Context, channelID *string) (*gqlmodel.TTSSettings, error) {
	return r.ttsGetChannelSettings(ctx, channelID)
}

// TtsVoices is the resolver for the ttsVoices field.
func (r *queryResolver) TtsVoices(ctx context.Context) (*gqlmodel.TTSVoices, error) {
	// should be like this because there is separate resolvers for services
	return &gqlmodel.TTSVoices{}, nil
}

// UsersSettings is the resolver for the usersSettings field.
func (r *tTSSettingsResolver) UsersSettings(ctx context.Context, obj *gqlmodel.TTSSettings) ([]gqlmodel.TTSUserSettings, error) {
	return r.getUsersSettings(ctx)
}

// User is the resolver for the user field.
func (r *tTSUserSettingsResolver) User(ctx context.Context, obj *gqlmodel.TTSUserSettings) (*gqlmodel.TwirUserTwitchInfo, error) {
	return data_loader.GetHelixUserById(ctx, obj.UserID)
}

// Rh is the resolver for the rh field.
func (r *tTSVoicesResolver) Rh(ctx context.Context, obj *gqlmodel.TTSVoices) (*gqlmodel.TTSRHVoices, error) {
	voicesInfo, err := r.ttsRhVoiceGetInfo(ctx)
	if err != nil {
		return nil, err
	}

	voices := make([]gqlmodel.TTSRHVoiceInfo, 0, len(voicesInfo.RhvoiceWrapperVoicesInfo))

	for key, info := range voicesInfo.RhvoiceWrapperVoicesInfo {
		voices = append(
			voices,
			gqlmodel.TTSRHVoiceInfo{
				Code:    key,
				Name:    info.Name,
				Country: info.Country,
				Gender:  info.Gender,
				Lang:    info.Lang,
				No:      info.No,
			},
		)
	}

	slices.SortFunc(
		voices,
		func(a, b gqlmodel.TTSRHVoiceInfo) int {
			return cmp.Compare(a.No, b.No)
		},
	)

	return &gqlmodel.TTSRHVoices{
		Voices: voices,
	}, nil
}

// TTSSettings returns graph.TTSSettingsResolver implementation.
func (r *Resolver) TTSSettings() graph.TTSSettingsResolver { return &tTSSettingsResolver{r} }

// TTSUserSettings returns graph.TTSUserSettingsResolver implementation.
func (r *Resolver) TTSUserSettings() graph.TTSUserSettingsResolver {
	return &tTSUserSettingsResolver{r}
}

// TTSVoices returns graph.TTSVoicesResolver implementation.
func (r *Resolver) TTSVoices() graph.TTSVoicesResolver { return &tTSVoicesResolver{r} }

type tTSSettingsResolver struct{ *Resolver }
type tTSUserSettingsResolver struct{ *Resolver }
type tTSVoicesResolver struct{ *Resolver }
