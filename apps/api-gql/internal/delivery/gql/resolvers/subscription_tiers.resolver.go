package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"cmp"
	"context"
	"slices"

	"github.com/google/uuid"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/libs/bus-core/telegram"
)

// SubscriptionTiers is the resolver for the subscriptionTiers field.
func (r *queryResolver) SubscriptionTiers(ctx context.Context) (
	[]gqlmodel.SubscriptionTier,
	error,
) {
	tiers, err := r.deps.TiersRepository.GetMany(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*gqlmodel.SubscriptionTier, 0, len(tiers))
	for _, tier := range tiers {
		res = append(
			res, &gqlmodel.SubscriptionTier{
				ID:         tier.ID,
				Name:       tier.Name,
				PriceCents: tier.PriceCents,
				CreatedAt:  tier.CreatedAt,
				UpdatedAt:  tier.UpdatedAt,
				Benefits:   make([]gqlmodel.SubscriptionTierBenefit, 0),
			},
		)
	}

	for _, tier := range res {
		benefits, err := r.deps.TiersBenefitsCacher.Get(ctx, tier.ID.String())
		if err != nil {
			return nil, err
		}

		for _, benefit := range benefits {
			tier.Benefits = append(
				tier.Benefits, gqlmodel.SubscriptionTierBenefit{
					ID:            benefit.ID,
					Name:          benefit.Name.String(),
					CreatedAt:     benefit.CreatedAt,
					UpdatedAt:     benefit.UpdatedAt,
					QuantityValue: benefit.QuantityValue,
				},
			)
		}
	}

	slices.SortFunc(
		res, func(a, b *gqlmodel.SubscriptionTier) int {
			return cmp.Compare(a.PriceCents, b.PriceCents)
		},
	)

	resUnPointered := make([]gqlmodel.SubscriptionTier, 0, len(res))
	for _, tier := range res {
		resUnPointered = append(resUnPointered, *tier)
	}

	return resUnPointered, nil
}

// SubscriptionTiersGetTelegramSubscribeURL is the resolver for the subscriptionTiersGetTelegramSubscribeUrl field.
func (r *queryResolver) SubscriptionTiersGetTelegramSubscribeURL(
	ctx context.Context,
	tierID uuid.UUID,
) (string, error) {
	tier, err := r.deps.TiersRepository.GetByID(ctx, tierID)
	if err != nil {
		return "", err
	}

	url, err := r.deps.TwirBus.Telegram.GenerateSubscriptionUrl.Request(
		ctx, telegram.GenerateSubscriptionUrlInput{
			Title:      tier.Name,
			StarsPrice: tier.PriceCents,
		},
	)
	if err != nil {
		return "", err
	}

	return url.Data, nil
}
