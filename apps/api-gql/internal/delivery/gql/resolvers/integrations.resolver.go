package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"net/url"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/services/integrations"
)

// TelegramCallback is the resolver for the telegramCallback field.
func (r *mutationResolver) TelegramCallback(ctx context.Context, input gqlmodel.TelegramCallbackInput) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	values := url.Values{}
	for k, v := range input.Values {
		stringVal := fmt.Sprintf("%v", v)
		values.Add(k, stringVal)
	}

	if ok := r.deps.IntegrationsService.TelegramVerifyStringSignature(values); !ok {
		return false, fmt.Errorf("invalid signature")
	}

	telegramUserID := values.Get("id")
	if telegramUserID == "" {
		return false, fmt.Errorf("invalid telegram user id")
	}

	if err := r.deps.IntegrationsService.TelegramCreateUserIntegration(
		ctx, integrations.TelegramUserIntegrationInput{
			ChannelID:      dashboardID,
			TelegramUserID: telegramUserID,
		},
	); err != nil {
		return false, err
	}

	return true, nil
}
