package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/google/uuid"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"github.com/twirapp/twir/apps/api-gql/internal/services/custom_overlays"
)

// CustomOverlaysCreate is the resolver for the customOverlaysCreate field.
func (r *mutationResolver) CustomOverlaysCreate(ctx context.Context, input gqlmodel.CustomOverlayCreateInput) (*gqlmodel.CustomOverlay, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	layers := make([]custom_overlays.LayerInput, len(input.Layers))
	for i, layer := range input.Layers {
		layers[i] = custom_overlays.LayerInput{
			Type:                    layer.Type.String(),
			Width:                   layer.Width,
			Height:                  layer.Height,
			PeriodicallyRefetchData: layer.PeriodicallyRefetchData,
			TransformString:         layer.TransformString,
			SettingsHtmlHtml:        layer.Settings.HTMLHTML.Value(),
			SettingsHtmlCss:         layer.Settings.HTMLCSS.Value(),
			SettingsHtmlJs:          layer.Settings.HTMLJs.Value(),
			SettingsHtmlDataPoll:    layer.Settings.HTMLPollSecondsInterval.Value(),
			SettingsImageURL:        layer.Settings.ImageURL.Value(),
		}
	}

	serviceInput := custom_overlays.CreateInput{
		ChannelID: dashboardID,
		Name:      input.Name,
		Width:     input.Width,
		Height:    input.Height,
		Layers:    layers,
	}

	newOverlay, err := r.deps.CustomOverlaysService.Create(ctx, serviceInput)
	if err != nil {
		return nil, err
	}

	convertedOverlay := mappers.CustomOverlayToGql(newOverlay)
	return &convertedOverlay, nil
}

// CustomOverlaysUpdate is the resolver for the customOverlaysUpdate field.
func (r *mutationResolver) CustomOverlaysUpdate(ctx context.Context, input gqlmodel.CustomOverlayUpdateInput) (*gqlmodel.CustomOverlay, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	layers := make([]custom_overlays.LayerInput, len(input.Layers))
	for i, layer := range input.Layers {
		layers[i] = custom_overlays.LayerInput{
			Type:                    layer.Type.String(),
			Width:                   layer.Width,
			Height:                  layer.Height,
			PeriodicallyRefetchData: layer.PeriodicallyRefetchData,
			TransformString:         layer.TransformString,
			SettingsHtmlHtml:        layer.Settings.HTMLHTML.Value(),
			SettingsHtmlCss:         layer.Settings.HTMLCSS.Value(),
			SettingsHtmlJs:          layer.Settings.HTMLJs.Value(),
			SettingsHtmlDataPoll:    layer.Settings.HTMLPollSecondsInterval.Value(),
			SettingsImageURL:        layer.Settings.ImageURL.Value(),
		}
	}

	serviceInput := custom_overlays.UpdateInput{
		ChannelID: dashboardID,
		Name:      input.Name,
		Width:     input.Width,
		Height:    input.Height,
		Layers:    layers,
	}

	updatedOverlay, err := r.deps.CustomOverlaysService.Update(ctx, input.ID, serviceInput)
	if err != nil {
		return nil, err
	}

	convertedOverlay := mappers.CustomOverlayToGql(updatedOverlay)
	return &convertedOverlay, nil
}

// CustomOverlaysDelete is the resolver for the customOverlaysDelete field.
func (r *mutationResolver) CustomOverlaysDelete(ctx context.Context, id uuid.UUID) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.CustomOverlaysService.Delete(ctx, id, dashboardID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CustomOverlaysParseHTML is the resolver for the customOverlaysParseHtml field.
func (r *mutationResolver) CustomOverlaysParseHTML(ctx context.Context, input gqlmodel.CustomOverlaysParseHTMLInput) (string, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return "", err
	}

	data, err := r.deps.CustomOverlaysService.ParseTextInHtml(ctx, dashboardID, input.Text)
	if err != nil {
		return "", err
	}

	return data, nil
}

// CustomOverlays is the resolver for the customOverlays field.
func (r *queryResolver) CustomOverlays(ctx context.Context) ([]gqlmodel.CustomOverlay, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	overlays, err := r.deps.CustomOverlaysService.GetMany(
		ctx,
		custom_overlays.GetManyInput{ChannelID: dashboardID},
	)
	if err != nil {
		return nil, err
	}

	mappedOverlays := make([]gqlmodel.CustomOverlay, len(overlays))
	for i, overlay := range overlays {
		mappedOverlays[i] = mappers.CustomOverlayToGql(overlay)
	}

	return mappedOverlays, nil
}
