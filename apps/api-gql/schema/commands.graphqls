type Command {
	id: ID!
	name: String!
	description: String
	aliases: [String!]
	responses: [CommandResponse!]
	createdAt: DateTime!
	updatedAt: DateTime!
}

type CommandResponse {
	id: ID!
	commandId: ID!
	text: String!
	order: Int!
}

extend type Query {
	commands: [Command!]! @isAuthenticated
}

input UpdateCommandOpts {
	name: String
	description: String
	aliases: [String!]
}

input CreateCommandResponseInput {
	text: String!
	order: Int!
}

input CreateCommandInput {
	name: String!
	description: String
	aliases: [String!]
	responses: [CreateCommandResponseInput!]
}

extend type Mutation {
	createCommand(opts: CreateCommandInput!): Command!
	updateCommand(id: String!, opts: UpdateCommandOpts!): Command!
}
