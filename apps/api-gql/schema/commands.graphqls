extend type Query {
	commands: [Command!]! @isAuthenticated @hasAccessToSelectedDashboard
}

extend type Mutation {
	createCommand(opts: CreateCommandInput!): Command! @isAuthenticated @hasAccessToSelectedDashboard
	updateCommand(id: String!, opts: UpdateCommandOpts!): Command! @isAuthenticated @hasAccessToSelectedDashboard
	removeCommand(id: String!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard
}

type Command {
	id: ID!
	name: String!
	description: String
	aliases: [String!]
	responses: [CommandResponse!] @goField(forceResolver: true)
	cooldown: Int
	cooldownType: String!
	enabled: Boolean!
	visible: Boolean!
	default: Boolean!
	defaultName: String
	module: String!
	isReply: Boolean!
	keepResponsesOrder: Boolean!
	deniedUsersIds: [String!]
	allowedUsersIds: [String!]
	rolesIds: [String!]
	onlineOnly: Boolean!
	cooldownRolesIds: [String!]
	enabledCategories: [String!]
	requiredWatchTime: Int!
	requiredMessages: Int!
	requiredUsedChannelPoints: Int!
}

type CommandResponse {
	id: ID!
	commandId: ID!
	text: String!
	order: Int!
}

input UpdateCommandOpts {
	name: String
	description: String
	aliases: [String!]
	responses: [CreateCommandResponseInput!]
	cooldown: Int
	cooldownType: String
	enabled: Boolean
	visible: Boolean
	isReply: Boolean
	keepResponsesOrder: Boolean
	deniedUsersIds: [String!]
	allowedUsersIds: [String!]
	rolesIds: [String!]
	onlineOnly: Boolean
	cooldownRolesIds: [String!]
	enabledCategories: [String!]
	requiredWatchTime: Int
	requiredMessages: Int
	requiredUsedChannelPoints: Int
}

input CreateCommandResponseInput {
	text: String!
	order: Int!
}

input CreateCommandInput {
	name: String!
	description: String
	aliases: [String!]
	responses: [CreateCommandResponseInput!]
}
