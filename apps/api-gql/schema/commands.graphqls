extend type Query {
	commands: [Command!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_COMMANDS)
	commandsPublic(channelId: ID!): [PublicCommand!]!
}

extend type Mutation {
	commandsCreate(opts: CommandsCreateOpts!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
	commandsUpdate(id: ID!, opts: CommandsUpdateOpts!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
	commandsRemove(id: ID!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
}

type Command {
	id: ID!
	name: String!
	description: String!
	aliases: [String!]!
	responses: [CommandResponse!]! @goField(forceResolver: true)
	cooldown: Int!
	cooldownType: String!
	enabled: Boolean!
	visible: Boolean!
	default: Boolean!
	defaultName: String
	module: String!
	isReply: Boolean!
	keepResponsesOrder: Boolean!
	deniedUsersIds: [String!]!
	allowedUsersIds: [String!]!
	rolesIds: [String!]!
	onlineOnly: Boolean!
	cooldownRolesIds: [String!]!
	enabledCategories: [String!]!
	requiredWatchTime: Int!
	requiredMessages: Int!
	requiredUsedChannelPoints: Int!
	group: CommandGroup
}
type CommandResponse {
	id: ID!
	commandId: ID!
	text: String!
	order: Int!
}

type PublicCommand {
	name: String!
	description: String!
	aliases: [String!]!
	responses: [String!]!
	cooldown: Int!
	cooldownType: String!
	module: String!
	permissions: [PublicCommandPermission!]!
}

type PublicCommandPermission {
	name: String!
	type: String!
}

input CommandsCreateOpts {
	name: String! @validate(constraint: "max=50")
	description: String! @validate(constraint: "max=500")
	aliases: [String!]! @validate(constraint: "dive,max=50")
	responses: [CreateOrUpdateCommandResponseInput!]!
	cooldown: Int! @validate(constraint: "max=90000")
	cooldownType: String!
	enabled: Boolean!
	visible: Boolean!
	isReply: Boolean!
	keepResponsesOrder: Boolean!
	deniedUsersIds: [String!]! @validate(constraint: "dive,max=500")
	allowedUsersIds: [String!]! @validate(constraint: "dive,max=500")
	rolesIds: [String!]! @validate(constraint: "dive,max=500")
	onlineOnly: Boolean!
	cooldownRolesIds: [String!]! @validate(constraint: "dive,max=500")
	enabledCategories: [String!]! @validate(constraint: "dive,max=500")
	requiredWatchTime: Int!
	requiredMessages: Int!
	requiredUsedChannelPoints: Int!
	groupId: String @validate(constraint: "max=500,omitempty")
}

input CommandsUpdateOpts {
	name: String @validate(constraint: "max=50")
	description: String @validate(constraint: "max=500")
	aliases: [String!] @validate(constraint: "dive,max=50")
	responses: [CreateOrUpdateCommandResponseInput!]
	cooldown: Int
	cooldownType: String
	enabled: Boolean
	visible: Boolean
	isReply: Boolean
	keepResponsesOrder: Boolean
	deniedUsersIds: [String!] @validate(constraint: "dive,max=500")
	allowedUsersIds: [String!] @validate(constraint: "dive,max=500")
	rolesIds: [String!]
	onlineOnly: Boolean
	cooldownRolesIds: [String!] @validate(constraint: "dive,max=500")
	enabledCategories: [String!] @validate(constraint: "dive,max=500")
	requiredWatchTime: Int
	requiredMessages: Int
	requiredUsedChannelPoints: Int
	groupId: String @validate(constraint: "max=500,omitempty")
}

input CreateOrUpdateCommandResponseInput {
	text: String! @validate(constraint: "max=500")
	order: Int!
}
