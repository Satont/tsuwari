extend type Query {
	authenticatedUser: AuthenticatedUser! @isAuthenticated
}

extend type Mutation {
	authenticatedUserSelectDashboard(dashboardId: String!): Boolean! @isAuthenticated
	authenticatedUserUpdateSettings(opts: UpdateSettingsInput!): Boolean! @isAuthenticated
	authenticatedUserRegenerateApiKey: String! @isAuthenticated
	authenticatedUserUpdatePublicPage(opts: UpdatePublicSettingsInput!): Boolean! @isAuthenticated
}

type AuthenticatedUser implements TwirUser {
	id: ID!
	isBotAdmin: Boolean!
	isBanned: Boolean!
	isEnabled: Boolean
	isBotModerator: Boolean
	apiKey: String!
	hideOnLandingPage: Boolean!
	botId: ID
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	selectedDashboardId: String!
	availableDashboards: [Dashboard!]!
	publicSettings: PublicSettings!
}

type Dashboard {
	id: String!
	flags: [ChannelRolePermissionEnum!]!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
}

input UpdateSettingsInput {
	hideOnLandingPage: Boolean!
}

type PublicSettings {
	description: String
	socialLinks: [SocialLink!]!
}

type SocialLink {
	title: String!
	href: String!
}

input UpdatePublicSettingsInput {
	description: String
	socialLinks: [SocialLinkInput!]
}

input SocialLinkInput {
	title: String!
	href: String!
}
