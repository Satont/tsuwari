extend type Query {
	"""
	Get TTS settings for the channel id, if the channel id is not provided, the current selected dashboard will be used.
	"""
	ttsSettings(channelId: String): TTSSettings!
	ttsVoices: TTSVoices! @isAuthenticated
}

enum TTSSettingsVoiceService {
	RH
	SILERO
}

type TTSSettings {
	enabled: Boolean!
	rate: Int!
	volume: Int!
	pitch: Int!
	voice: String!
	voiceService: TTSSettingsVoiceService!
	allowUsersChooseVoiceInMainCommand: Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	maxSymbols: Int! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	disallowedVoices: [TTSSettingsDisallowedVoice!]! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	doNotReadEmoji: Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	doNotReadTwitchEmotes: Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	doNotReadLinks: Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	readChatMessages: Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	readChatMessagesNicknames: Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	usersSettings: [TTSUserSettings!]! @goField(forceResolver: true)
}

type TTSSettingsDisallowedVoice {
	service: TTSSettingsVoiceService!
	voice: String!
}

type TTSUserSettings {
	userId: String!
	user: TwirUserTwitchInfo! @goField(forceResolver: true)
	voice: String!
	voiceService: TTSSettingsVoiceService!
	rate: Int!
	pitch: Int!
}

type TTSVoices {
	rh: TTSRHVoices! @goField(forceResolver: true)
}

type TTSRHVoices {
	voices: [TTSRHVoiceInfo!]!
}

type TTSRHVoiceInfo {
	code: String!
	name: String!
	country: String!
	gender: String!
	lang: String!
	no: Int!
}
