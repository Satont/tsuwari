diff --git a/dist/types.d.ts b/dist/types.d.ts
index 91e51ebc9200fd39995e34e3c23e6d04a84710d5..2fed2d06b6640d9211068192c97b146411ebfe11 100755
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -46,98 +46,98 @@ export interface IframeApiType {
  * @see https://developers.google.com/youtube/iframe_api_reference
  */
 export interface YouTubePlayer {
-    addEventListener(event: string, listener: (event: CustomEvent) => void): Promise<void>;
-    destroy(): Promise<void>;
-    getAvailablePlaybackRates(): Promise<ReadonlyArray<number>>;
-    getAvailableQualityLevels(): Promise<ReadonlyArray<string>>;
-    getCurrentTime(): Promise<number>;
-    getDuration(): Promise<number>;
-    getIframe(): Promise<HTMLIFrameElement>;
-    getOption(module: string, option: string): Promise<any>;
-    getOptions(): Promise<string[]>;
-    getOptions(module: string): Promise<object>;
-    setOption(module: string, option: string, value: any): Promise<void>;
-    setOptions(): Promise<void>;
+    addEventListener(event: string, listener: (event: CustomEvent) => void): void;
+    destroy(): void;
+    getAvailablePlaybackRates(): ReadonlyArray<number>;
+    getAvailableQualityLevels(): ReadonlyArray<string>;
+    getCurrentTime(): number;
+    getDuration(): number;
+    getIframe(): HTMLIFrameElement;
+    getOption(module: string, option: string): any;
+    getOptions(): string[];
+    getOptions(module: string): object;
+    setOption(module: string, option: string, value: any): void;
+    setOptions(): void;
     cuePlaylist(
         playlist: string | ReadonlyArray<string>,
         index?: number,
         startSeconds?: number,
         suggestedQuality?: string,
-    ): Promise<void>;
+    ): void;
     cuePlaylist(playlist: {
         listType: string,
         list?: string | undefined,
         index?: number | undefined,
         startSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
+    }): void;
     loadPlaylist(
         playlist: string | ReadonlyArray<string>,
         index?: number,
         startSeconds?: number,
         suggestedQuality?: string,
-    ): Promise<void>;
+    ): void;
     loadPlaylist(playlist: {
         listType: string,
         list?: string | undefined,
         index?: number | undefined,
         startSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    getPlaylist(): Promise<ReadonlyArray<string>>;
-    getPlaylistIndex(): Promise<number>;
-    getPlaybackQuality(): Promise<string>;
-    getPlaybackRate(): Promise<number>;
-    getPlayerState(): Promise<PlayerState>;
-    getVideoEmbedCode(): Promise<string>;
-    getVideoLoadedFraction(): Promise<number>;
-    getVideoUrl(): Promise<string>;
-    getVolume(): Promise<number>;
-    cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    getPlaylist(): ReadonlyArray<string>;
+    getPlaylistIndex(): number;
+    getPlaybackQuality(): string;
+    getPlaybackRate(): number;
+    getPlayerState(): PlayerState;
+    getVideoEmbedCode(): string;
+    getVideoLoadedFraction(): number;
+    getVideoUrl(): string;
+    getVolume(): number;
+    cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;
     cueVideoById(video: {
         videoId: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    cueVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    cueVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): void;
     cueVideoByUrl(video: {
         mediaContentUrl: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    loadVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    loadVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): void;
     loadVideoByUrl(video: {
         mediaContentUrl: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;
     loadVideoById(video: {
         videoId: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    isMuted(): Promise<boolean>;
-    mute(): Promise<void>;
-    nextVideo(): Promise<void>;
-    pauseVideo(): Promise<void>;
-    playVideo(): Promise<void>;
-    playVideoAt(index: number): Promise<void>;
-    previousVideo(): Promise<void>;
-    removeEventListener(event: string, listener: (event: CustomEvent) => void): Promise<void>;
-    seekTo(seconds: number, allowSeekAhead: boolean): Promise<void>;
-    setLoop(loopPlaylists: boolean): Promise<void>;
-    setPlaybackQuality(suggestedQuality: string): Promise<void>;
-    setPlaybackRate(suggestedRate: number): Promise<void>;
-    setShuffle(shufflePlaylist: boolean): Promise<void>;
-    setSize(width: number, height: number): Promise<object>;
-    setVolume(volume: number): Promise<void>;
-    stopVideo(): Promise<void>;
-    unMute(): Promise<void>;
+    }): void;
+    isMuted(): boolean;
+    mute(): void;
+    nextVideo(): void;
+    pauseVideo(): void;
+    playVideo(): void;
+    playVideoAt(index: number): void;
+    previousVideo(): void;
+    removeEventListener(event: string, listener: (event: CustomEvent) => void): void;
+    seekTo(seconds: number, allowSeekAhead: boolean): void;
+    setLoop(loopPlaylists: boolean): void;
+    setPlaybackQuality(suggestedQuality: string): void;
+    setPlaybackRate(suggestedRate: number): void;
+    setShuffle(shufflePlaylist: boolean): void;
+    setSize(width: number, height: number): object;
+    setVolume(volume: number): void;
+    stopVideo(): void;
+    unMute(): void;
     on(eventType: 'stateChange', listener: (event: CustomEvent & { data: number }) => void): void;
     on(eventType: EventType, listener: (event: CustomEvent) => void): void;
 }