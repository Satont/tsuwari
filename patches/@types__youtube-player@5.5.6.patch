diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..13566b81b018ad684f3a35fee301741b2734c8f4
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/1b219cdd3e5edbcd84b906547869b7d3.iml b/.idea/1b219cdd3e5edbcd84b906547869b7d3.iml
new file mode 100644
index 0000000000000000000000000000000000000000..5e764c4f0b9a64bb78a5babfdd583713b2df47bf
--- /dev/null
+++ b/.idea/1b219cdd3e5edbcd84b906547869b7d3.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="Go" enabled="true" />
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000000000000000000000000000000000000..9e4a1886ac58e69288758f1e52b9dc7226aa095f
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/1b219cdd3e5edbcd84b906547869b7d3.iml" filepath="$PROJECT_DIR$/.idea/1b219cdd3e5edbcd84b906547869b7d3.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
index 0000000000000000000000000000000000000000..b9212b87c85cd8ca5de661add444e09ac7a3616a
--- /dev/null
+++ b/.idea/workspace.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="ALL" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="7fc97022-45d1-403d-a534-05daf8c5d8ac" name="Changes" comment="" />
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="GOROOT" url="file:///usr/lib/go" />
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2Jwwob7W25cttApKWQt7ToccNrs" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.go.formatter.settings.were.checked": "true",
+    "RunOnceActivity.go.migrated.go.modules.settings": "true",
+    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "go.import.settings.migrated": "true",
+    "go.sdk.automatically.set": "true",
+    "last_opened_file_path": "/home/satont",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "settings.sync",
+    "ts.external.directory.path": "/opt/goland/plugins/javascript-impl/jsLanguageServicesImpl/external",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="VgoProject">
+    <settings-migrated>true</settings-migrated>
+  </component>
+</project>
\ No newline at end of file
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 91e51ebc9200fd39995e34e3c23e6d04a84710d5..2fed2d06b6640d9211068192c97b146411ebfe11 100755
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -46,98 +46,98 @@ export interface IframeApiType {
  * @see https://developers.google.com/youtube/iframe_api_reference
  */
 export interface YouTubePlayer {
-    addEventListener(event: string, listener: (event: CustomEvent) => void): Promise<void>;
-    destroy(): Promise<void>;
-    getAvailablePlaybackRates(): Promise<ReadonlyArray<number>>;
-    getAvailableQualityLevels(): Promise<ReadonlyArray<string>>;
-    getCurrentTime(): Promise<number>;
-    getDuration(): Promise<number>;
-    getIframe(): Promise<HTMLIFrameElement>;
-    getOption(module: string, option: string): Promise<any>;
-    getOptions(): Promise<string[]>;
-    getOptions(module: string): Promise<object>;
-    setOption(module: string, option: string, value: any): Promise<void>;
-    setOptions(): Promise<void>;
+    addEventListener(event: string, listener: (event: CustomEvent) => void): void;
+    destroy(): void;
+    getAvailablePlaybackRates(): ReadonlyArray<number>;
+    getAvailableQualityLevels(): ReadonlyArray<string>;
+    getCurrentTime(): number;
+    getDuration(): number;
+    getIframe(): HTMLIFrameElement;
+    getOption(module: string, option: string): any;
+    getOptions(): string[];
+    getOptions(module: string): object;
+    setOption(module: string, option: string, value: any): void;
+    setOptions(): void;
     cuePlaylist(
         playlist: string | ReadonlyArray<string>,
         index?: number,
         startSeconds?: number,
         suggestedQuality?: string,
-    ): Promise<void>;
+    ): void;
     cuePlaylist(playlist: {
         listType: string,
         list?: string | undefined,
         index?: number | undefined,
         startSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
+    }): void;
     loadPlaylist(
         playlist: string | ReadonlyArray<string>,
         index?: number,
         startSeconds?: number,
         suggestedQuality?: string,
-    ): Promise<void>;
+    ): void;
     loadPlaylist(playlist: {
         listType: string,
         list?: string | undefined,
         index?: number | undefined,
         startSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    getPlaylist(): Promise<ReadonlyArray<string>>;
-    getPlaylistIndex(): Promise<number>;
-    getPlaybackQuality(): Promise<string>;
-    getPlaybackRate(): Promise<number>;
-    getPlayerState(): Promise<PlayerState>;
-    getVideoEmbedCode(): Promise<string>;
-    getVideoLoadedFraction(): Promise<number>;
-    getVideoUrl(): Promise<string>;
-    getVolume(): Promise<number>;
-    cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    getPlaylist(): ReadonlyArray<string>;
+    getPlaylistIndex(): number;
+    getPlaybackQuality(): string;
+    getPlaybackRate(): number;
+    getPlayerState(): PlayerState;
+    getVideoEmbedCode(): string;
+    getVideoLoadedFraction(): number;
+    getVideoUrl(): string;
+    getVolume(): number;
+    cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;
     cueVideoById(video: {
         videoId: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    cueVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    cueVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): void;
     cueVideoByUrl(video: {
         mediaContentUrl: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    loadVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    loadVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: string): void;
     loadVideoByUrl(video: {
         mediaContentUrl: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): Promise<void>;
+    }): void;
+    loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;
     loadVideoById(video: {
         videoId: string,
         startSeconds?: number | undefined,
         endSeconds?: number | undefined,
         suggestedQuality?: string | undefined,
-    }): Promise<void>;
-    isMuted(): Promise<boolean>;
-    mute(): Promise<void>;
-    nextVideo(): Promise<void>;
-    pauseVideo(): Promise<void>;
-    playVideo(): Promise<void>;
-    playVideoAt(index: number): Promise<void>;
-    previousVideo(): Promise<void>;
-    removeEventListener(event: string, listener: (event: CustomEvent) => void): Promise<void>;
-    seekTo(seconds: number, allowSeekAhead: boolean): Promise<void>;
-    setLoop(loopPlaylists: boolean): Promise<void>;
-    setPlaybackQuality(suggestedQuality: string): Promise<void>;
-    setPlaybackRate(suggestedRate: number): Promise<void>;
-    setShuffle(shufflePlaylist: boolean): Promise<void>;
-    setSize(width: number, height: number): Promise<object>;
-    setVolume(volume: number): Promise<void>;
-    stopVideo(): Promise<void>;
-    unMute(): Promise<void>;
+    }): void;
+    isMuted(): boolean;
+    mute(): void;
+    nextVideo(): void;
+    pauseVideo(): void;
+    playVideo(): void;
+    playVideoAt(index: number): void;
+    previousVideo(): void;
+    removeEventListener(event: string, listener: (event: CustomEvent) => void): void;
+    seekTo(seconds: number, allowSeekAhead: boolean): void;
+    setLoop(loopPlaylists: boolean): void;
+    setPlaybackQuality(suggestedQuality: string): void;
+    setPlaybackRate(suggestedRate: number): void;
+    setShuffle(shufflePlaylist: boolean): void;
+    setSize(width: number, height: number): object;
+    setVolume(volume: number): void;
+    stopVideo(): void;
+    unMute(): void;
     on(eventType: 'stateChange', listener: (event: CustomEvent & { data: number }) => void): void;
     on(eventType: EventType, listener: (event: CustomEvent) => void): void;
 }