// @generated by protobuf-ts 2.8.0 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "eval.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Evaluate
 */
export interface Evaluate {
    /**
     * @generated from protobuf field: string script = 1;
     */
    script: string;
}
/**
 * @generated from protobuf message EvaluateResult
 */
export interface EvaluateResult {
    /**
     * @generated from protobuf field: string result = 1;
     */
    result: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Evaluate$Type extends MessageType<Evaluate> {
    constructor() {
        super("Evaluate", [
            { no: 1, name: "script", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Evaluate>): Evaluate {
        const message = { script: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Evaluate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Evaluate): Evaluate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string script */ 1:
                    message.script = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Evaluate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string script = 1; */
        if (message.script !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.script);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Evaluate
 */
export const Evaluate = new Evaluate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EvaluateResult$Type extends MessageType<EvaluateResult> {
    constructor() {
        super("EvaluateResult", [
            { no: 1, name: "result", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EvaluateResult>): EvaluateResult {
        const message = { result: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EvaluateResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EvaluateResult): EvaluateResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string result */ 1:
                    message.result = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EvaluateResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string result = 1; */
        if (message.result !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EvaluateResult
 */
export const EvaluateResult = new EvaluateResult$Type();
