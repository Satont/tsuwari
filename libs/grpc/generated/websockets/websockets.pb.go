// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: websockets.proto

package websockets

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type YoutubeAddSongToQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	EntityId  string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
}

func (x *YoutubeAddSongToQueueRequest) Reset() {
	*x = YoutubeAddSongToQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YoutubeAddSongToQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoutubeAddSongToQueueRequest) ProtoMessage() {}

func (x *YoutubeAddSongToQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoutubeAddSongToQueueRequest.ProtoReflect.Descriptor instead.
func (*YoutubeAddSongToQueueRequest) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{0}
}

func (x *YoutubeAddSongToQueueRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *YoutubeAddSongToQueueRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type YoutubeRemoveSongFromQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	EntityId  string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
}

func (x *YoutubeRemoveSongFromQueueRequest) Reset() {
	*x = YoutubeRemoveSongFromQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YoutubeRemoveSongFromQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoutubeRemoveSongFromQueueRequest) ProtoMessage() {}

func (x *YoutubeRemoveSongFromQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoutubeRemoveSongFromQueueRequest.ProtoReflect.Descriptor instead.
func (*YoutubeRemoveSongFromQueueRequest) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{1}
}

func (x *YoutubeRemoveSongFromQueueRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *YoutubeRemoveSongFromQueueRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type ObsSetSceneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	SceneName string `protobuf:"bytes,2,opt,name=sceneName,proto3" json:"sceneName,omitempty"`
}

func (x *ObsSetSceneMessage) Reset() {
	*x = ObsSetSceneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsSetSceneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsSetSceneMessage) ProtoMessage() {}

func (x *ObsSetSceneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsSetSceneMessage.ProtoReflect.Descriptor instead.
func (*ObsSetSceneMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{2}
}

func (x *ObsSetSceneMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsSetSceneMessage) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

type ObsToggleSourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	SourceName string `protobuf:"bytes,2,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
}

func (x *ObsToggleSourceMessage) Reset() {
	*x = ObsToggleSourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsToggleSourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsToggleSourceMessage) ProtoMessage() {}

func (x *ObsToggleSourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsToggleSourceMessage.ProtoReflect.Descriptor instead.
func (*ObsToggleSourceMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{3}
}

func (x *ObsToggleSourceMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsToggleSourceMessage) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

type ObsToggleAudioMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AudioSourceName string `protobuf:"bytes,2,opt,name=audioSourceName,proto3" json:"audioSourceName,omitempty"`
}

func (x *ObsToggleAudioMessage) Reset() {
	*x = ObsToggleAudioMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsToggleAudioMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsToggleAudioMessage) ProtoMessage() {}

func (x *ObsToggleAudioMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsToggleAudioMessage.ProtoReflect.Descriptor instead.
func (*ObsToggleAudioMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{4}
}

func (x *ObsToggleAudioMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsToggleAudioMessage) GetAudioSourceName() string {
	if x != nil {
		return x.AudioSourceName
	}
	return ""
}

type ObsAudioSetVolumeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AudioSourceName string `protobuf:"bytes,2,opt,name=audioSourceName,proto3" json:"audioSourceName,omitempty"`
	Volume          uint32 `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *ObsAudioSetVolumeMessage) Reset() {
	*x = ObsAudioSetVolumeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsAudioSetVolumeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsAudioSetVolumeMessage) ProtoMessage() {}

func (x *ObsAudioSetVolumeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsAudioSetVolumeMessage.ProtoReflect.Descriptor instead.
func (*ObsAudioSetVolumeMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{5}
}

func (x *ObsAudioSetVolumeMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsAudioSetVolumeMessage) GetAudioSourceName() string {
	if x != nil {
		return x.AudioSourceName
	}
	return ""
}

func (x *ObsAudioSetVolumeMessage) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type ObsAudioIncreaseVolumeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AudioSourceName string `protobuf:"bytes,2,opt,name=audioSourceName,proto3" json:"audioSourceName,omitempty"`
	Step            uint32 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *ObsAudioIncreaseVolumeMessage) Reset() {
	*x = ObsAudioIncreaseVolumeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsAudioIncreaseVolumeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsAudioIncreaseVolumeMessage) ProtoMessage() {}

func (x *ObsAudioIncreaseVolumeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsAudioIncreaseVolumeMessage.ProtoReflect.Descriptor instead.
func (*ObsAudioIncreaseVolumeMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{6}
}

func (x *ObsAudioIncreaseVolumeMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsAudioIncreaseVolumeMessage) GetAudioSourceName() string {
	if x != nil {
		return x.AudioSourceName
	}
	return ""
}

func (x *ObsAudioIncreaseVolumeMessage) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type ObsAudioDecreaseVolumeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AudioSourceName string `protobuf:"bytes,2,opt,name=audioSourceName,proto3" json:"audioSourceName,omitempty"`
	Step            uint32 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *ObsAudioDecreaseVolumeMessage) Reset() {
	*x = ObsAudioDecreaseVolumeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsAudioDecreaseVolumeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsAudioDecreaseVolumeMessage) ProtoMessage() {}

func (x *ObsAudioDecreaseVolumeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsAudioDecreaseVolumeMessage.ProtoReflect.Descriptor instead.
func (*ObsAudioDecreaseVolumeMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{7}
}

func (x *ObsAudioDecreaseVolumeMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsAudioDecreaseVolumeMessage) GetAudioSourceName() string {
	if x != nil {
		return x.AudioSourceName
	}
	return ""
}

func (x *ObsAudioDecreaseVolumeMessage) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type ObsAudioDisableOrEnableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AudioSourceName string `protobuf:"bytes,2,opt,name=audioSourceName,proto3" json:"audioSourceName,omitempty"`
}

func (x *ObsAudioDisableOrEnableMessage) Reset() {
	*x = ObsAudioDisableOrEnableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsAudioDisableOrEnableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsAudioDisableOrEnableMessage) ProtoMessage() {}

func (x *ObsAudioDisableOrEnableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsAudioDisableOrEnableMessage.ProtoReflect.Descriptor instead.
func (*ObsAudioDisableOrEnableMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{8}
}

func (x *ObsAudioDisableOrEnableMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ObsAudioDisableOrEnableMessage) GetAudioSourceName() string {
	if x != nil {
		return x.AudioSourceName
	}
	return ""
}

type ObsStopOrStartStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *ObsStopOrStartStream) Reset() {
	*x = ObsStopOrStartStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsStopOrStartStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsStopOrStartStream) ProtoMessage() {}

func (x *ObsStopOrStartStream) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsStopOrStartStream.ProtoReflect.Descriptor instead.
func (*ObsStopOrStartStream) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{9}
}

func (x *ObsStopOrStartStream) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type TTSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Voice     string `protobuf:"bytes,3,opt,name=voice,proto3" json:"voice,omitempty"`
	Rate      string `protobuf:"bytes,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Pitch     string `protobuf:"bytes,5,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Volume    string `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *TTSMessage) Reset() {
	*x = TTSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTSMessage) ProtoMessage() {}

func (x *TTSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTSMessage.ProtoReflect.Descriptor instead.
func (*TTSMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{10}
}

func (x *TTSMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *TTSMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TTSMessage) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

func (x *TTSMessage) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *TTSMessage) GetPitch() string {
	if x != nil {
		return x.Pitch
	}
	return ""
}

func (x *TTSMessage) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

type TTSSkipMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *TTSSkipMessage) Reset() {
	*x = TTSSkipMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_websockets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTSSkipMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTSSkipMessage) ProtoMessage() {}

func (x *TTSSkipMessage) ProtoReflect() protoreflect.Message {
	mi := &file_websockets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTSSkipMessage.ProtoReflect.Descriptor instead.
func (*TTSSkipMessage) Descriptor() ([]byte, []int) {
	return file_websockets_proto_rawDescGZIP(), []int{11}
}

func (x *TTSSkipMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

var File_websockets_proto protoreflect.FileDescriptor

var file_websockets_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x1c, 0x59,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x21, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x12, 0x4f, 0x62, 0x73, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x16, 0x4f, 0x62, 0x73, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f,
	0x0a, 0x15, 0x4f, 0x62, 0x73, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x7a, 0x0a, 0x18, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x1d, 0x4f,
	0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x7b, 0x0a, 0x1d, 0x4f, 0x62, 0x73, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x68, 0x0a, 0x1e, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x34, 0x0a, 0x14, 0x4f, 0x62, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x54, 0x54, 0x53, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x2e,
	0x0a, 0x0e, 0x54, 0x54, 0x53, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x32, 0xa4,
	0x09, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x15,
	0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x6f,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e,
	0x67, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x59, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x6f,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x53, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1e, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x53, 0x65,
	0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16,
	0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x4f,
	0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x4f, 0x62,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x4f,
	0x62, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x53, 0x61, 0x79, 0x12, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x54, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x12,
	0x1a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x54, 0x53,
	0x53, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x19, 0x5a, 0x17, 0x74, 0x73, 0x75, 0x77, 0x61, 0x72, 0x69,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_websockets_proto_rawDescOnce sync.Once
	file_websockets_proto_rawDescData = file_websockets_proto_rawDesc
)

func file_websockets_proto_rawDescGZIP() []byte {
	file_websockets_proto_rawDescOnce.Do(func() {
		file_websockets_proto_rawDescData = protoimpl.X.CompressGZIP(file_websockets_proto_rawDescData)
	})
	return file_websockets_proto_rawDescData
}

var file_websockets_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_websockets_proto_goTypes = []interface{}{
	(*YoutubeAddSongToQueueRequest)(nil),      // 0: websockets.YoutubeAddSongToQueueRequest
	(*YoutubeRemoveSongFromQueueRequest)(nil), // 1: websockets.YoutubeRemoveSongFromQueueRequest
	(*ObsSetSceneMessage)(nil),                // 2: websockets.ObsSetSceneMessage
	(*ObsToggleSourceMessage)(nil),            // 3: websockets.ObsToggleSourceMessage
	(*ObsToggleAudioMessage)(nil),             // 4: websockets.ObsToggleAudioMessage
	(*ObsAudioSetVolumeMessage)(nil),          // 5: websockets.ObsAudioSetVolumeMessage
	(*ObsAudioIncreaseVolumeMessage)(nil),     // 6: websockets.ObsAudioIncreaseVolumeMessage
	(*ObsAudioDecreaseVolumeMessage)(nil),     // 7: websockets.ObsAudioDecreaseVolumeMessage
	(*ObsAudioDisableOrEnableMessage)(nil),    // 8: websockets.ObsAudioDisableOrEnableMessage
	(*ObsStopOrStartStream)(nil),              // 9: websockets.ObsStopOrStartStream
	(*TTSMessage)(nil),                        // 10: websockets.TTSMessage
	(*TTSSkipMessage)(nil),                    // 11: websockets.TTSSkipMessage
	(*emptypb.Empty)(nil),                     // 12: google.protobuf.Empty
}
var file_websockets_proto_depIdxs = []int32{
	0,  // 0: websockets.Websocket.YoutubeAddSongToQueue:input_type -> websockets.YoutubeAddSongToQueueRequest
	1,  // 1: websockets.Websocket.YoutubeRemoveSongToQueue:input_type -> websockets.YoutubeRemoveSongFromQueueRequest
	2,  // 2: websockets.Websocket.ObsSetScene:input_type -> websockets.ObsSetSceneMessage
	3,  // 3: websockets.Websocket.ObsToggleSource:input_type -> websockets.ObsToggleSourceMessage
	4,  // 4: websockets.Websocket.ObsToggleAudio:input_type -> websockets.ObsToggleAudioMessage
	5,  // 5: websockets.Websocket.ObsAudioSetVolume:input_type -> websockets.ObsAudioSetVolumeMessage
	6,  // 6: websockets.Websocket.ObsAudioIncreaseVolume:input_type -> websockets.ObsAudioIncreaseVolumeMessage
	7,  // 7: websockets.Websocket.ObsAudioDecreaseVolume:input_type -> websockets.ObsAudioDecreaseVolumeMessage
	8,  // 8: websockets.Websocket.ObsAudioEnable:input_type -> websockets.ObsAudioDisableOrEnableMessage
	8,  // 9: websockets.Websocket.ObsAudioDisable:input_type -> websockets.ObsAudioDisableOrEnableMessage
	9,  // 10: websockets.Websocket.ObsStopStream:input_type -> websockets.ObsStopOrStartStream
	9,  // 11: websockets.Websocket.ObsStartStream:input_type -> websockets.ObsStopOrStartStream
	10, // 12: websockets.Websocket.TextToSpeechSay:input_type -> websockets.TTSMessage
	11, // 13: websockets.Websocket.TextToSpeechSkip:input_type -> websockets.TTSSkipMessage
	12, // 14: websockets.Websocket.YoutubeAddSongToQueue:output_type -> google.protobuf.Empty
	12, // 15: websockets.Websocket.YoutubeRemoveSongToQueue:output_type -> google.protobuf.Empty
	12, // 16: websockets.Websocket.ObsSetScene:output_type -> google.protobuf.Empty
	12, // 17: websockets.Websocket.ObsToggleSource:output_type -> google.protobuf.Empty
	12, // 18: websockets.Websocket.ObsToggleAudio:output_type -> google.protobuf.Empty
	12, // 19: websockets.Websocket.ObsAudioSetVolume:output_type -> google.protobuf.Empty
	12, // 20: websockets.Websocket.ObsAudioIncreaseVolume:output_type -> google.protobuf.Empty
	12, // 21: websockets.Websocket.ObsAudioDecreaseVolume:output_type -> google.protobuf.Empty
	12, // 22: websockets.Websocket.ObsAudioEnable:output_type -> google.protobuf.Empty
	12, // 23: websockets.Websocket.ObsAudioDisable:output_type -> google.protobuf.Empty
	12, // 24: websockets.Websocket.ObsStopStream:output_type -> google.protobuf.Empty
	12, // 25: websockets.Websocket.ObsStartStream:output_type -> google.protobuf.Empty
	12, // 26: websockets.Websocket.TextToSpeechSay:output_type -> google.protobuf.Empty
	12, // 27: websockets.Websocket.TextToSpeechSkip:output_type -> google.protobuf.Empty
	14, // [14:28] is the sub-list for method output_type
	0,  // [0:14] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_websockets_proto_init() }
func file_websockets_proto_init() {
	if File_websockets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_websockets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YoutubeAddSongToQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YoutubeRemoveSongFromQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsSetSceneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsToggleSourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsToggleAudioMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsAudioSetVolumeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsAudioIncreaseVolumeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsAudioDecreaseVolumeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsAudioDisableOrEnableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsStopOrStartStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_websockets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTSSkipMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_websockets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_websockets_proto_goTypes,
		DependencyIndexes: file_websockets_proto_depIdxs,
		MessageInfos:      file_websockets_proto_msgTypes,
	}.Build()
	File_websockets_proto = out.File
	file_websockets_proto_rawDesc = nil
	file_websockets_proto_goTypes = nil
	file_websockets_proto_depIdxs = nil
}
