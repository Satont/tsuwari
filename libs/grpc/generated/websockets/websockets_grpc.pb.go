// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: websockets.proto

package websockets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebsocketClient is the client API for Websocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketClient interface {
	YoutubeAddSongToQueue(ctx context.Context, in *YoutubeAddSongToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	YoutubeRemoveSongToQueue(ctx context.Context, in *YoutubeRemoveSongFromQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsSetScene(ctx context.Context, in *ObsSetSceneMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsToggleSource(ctx context.Context, in *ObsToggleSourceMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsToggleAudio(ctx context.Context, in *ObsToggleAudioMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioSetVolume(ctx context.Context, in *ObsAudioSetVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioIncreaseVolume(ctx context.Context, in *ObsAudioIncreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioDecreaseVolume(ctx context.Context, in *ObsAudioDecreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioEnable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioDisable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsStopStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsStartStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TextToSpeechSay(ctx context.Context, in *TTSMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TextToSpeechSkip(ctx context.Context, in *TTSSkipMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type websocketClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketClient(cc grpc.ClientConnInterface) WebsocketClient {
	return &websocketClient{cc}
}

func (c *websocketClient) YoutubeAddSongToQueue(ctx context.Context, in *YoutubeAddSongToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/YoutubeAddSongToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) YoutubeRemoveSongToQueue(ctx context.Context, in *YoutubeRemoveSongFromQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/YoutubeRemoveSongToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsSetScene(ctx context.Context, in *ObsSetSceneMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsSetScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsToggleSource(ctx context.Context, in *ObsToggleSourceMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsToggleSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsToggleAudio(ctx context.Context, in *ObsToggleAudioMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsToggleAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioSetVolume(ctx context.Context, in *ObsAudioSetVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsAudioSetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioIncreaseVolume(ctx context.Context, in *ObsAudioIncreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsAudioIncreaseVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioDecreaseVolume(ctx context.Context, in *ObsAudioDecreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsAudioDecreaseVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioEnable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsAudioEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioDisable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsAudioDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsStopStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsStopStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsStartStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/ObsStartStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TextToSpeechSay(ctx context.Context, in *TTSMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/TextToSpeechSay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TextToSpeechSkip(ctx context.Context, in *TTSSkipMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/websockets.Websocket/TextToSpeechSkip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServer is the server API for Websocket service.
// All implementations must embed UnimplementedWebsocketServer
// for forward compatibility
type WebsocketServer interface {
	YoutubeAddSongToQueue(context.Context, *YoutubeAddSongToQueueRequest) (*emptypb.Empty, error)
	YoutubeRemoveSongToQueue(context.Context, *YoutubeRemoveSongFromQueueRequest) (*emptypb.Empty, error)
	ObsSetScene(context.Context, *ObsSetSceneMessage) (*emptypb.Empty, error)
	ObsToggleSource(context.Context, *ObsToggleSourceMessage) (*emptypb.Empty, error)
	ObsToggleAudio(context.Context, *ObsToggleAudioMessage) (*emptypb.Empty, error)
	ObsAudioSetVolume(context.Context, *ObsAudioSetVolumeMessage) (*emptypb.Empty, error)
	ObsAudioIncreaseVolume(context.Context, *ObsAudioIncreaseVolumeMessage) (*emptypb.Empty, error)
	ObsAudioDecreaseVolume(context.Context, *ObsAudioDecreaseVolumeMessage) (*emptypb.Empty, error)
	ObsAudioEnable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error)
	ObsAudioDisable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error)
	ObsStopStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error)
	ObsStartStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error)
	TextToSpeechSay(context.Context, *TTSMessage) (*emptypb.Empty, error)
	TextToSpeechSkip(context.Context, *TTSSkipMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebsocketServer()
}

// UnimplementedWebsocketServer must be embedded to have forward compatible implementations.
type UnimplementedWebsocketServer struct {
}

func (UnimplementedWebsocketServer) YoutubeAddSongToQueue(context.Context, *YoutubeAddSongToQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YoutubeAddSongToQueue not implemented")
}
func (UnimplementedWebsocketServer) YoutubeRemoveSongToQueue(context.Context, *YoutubeRemoveSongFromQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YoutubeRemoveSongToQueue not implemented")
}
func (UnimplementedWebsocketServer) ObsSetScene(context.Context, *ObsSetSceneMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsSetScene not implemented")
}
func (UnimplementedWebsocketServer) ObsToggleSource(context.Context, *ObsToggleSourceMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsToggleSource not implemented")
}
func (UnimplementedWebsocketServer) ObsToggleAudio(context.Context, *ObsToggleAudioMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsToggleAudio not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioSetVolume(context.Context, *ObsAudioSetVolumeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioSetVolume not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioIncreaseVolume(context.Context, *ObsAudioIncreaseVolumeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioIncreaseVolume not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioDecreaseVolume(context.Context, *ObsAudioDecreaseVolumeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioDecreaseVolume not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioEnable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioEnable not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioDisable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioDisable not implemented")
}
func (UnimplementedWebsocketServer) ObsStopStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsStopStream not implemented")
}
func (UnimplementedWebsocketServer) ObsStartStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsStartStream not implemented")
}
func (UnimplementedWebsocketServer) TextToSpeechSay(context.Context, *TTSMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeechSay not implemented")
}
func (UnimplementedWebsocketServer) TextToSpeechSkip(context.Context, *TTSSkipMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeechSkip not implemented")
}
func (UnimplementedWebsocketServer) mustEmbedUnimplementedWebsocketServer() {}

// UnsafeWebsocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketServer will
// result in compilation errors.
type UnsafeWebsocketServer interface {
	mustEmbedUnimplementedWebsocketServer()
}

func RegisterWebsocketServer(s grpc.ServiceRegistrar, srv WebsocketServer) {
	s.RegisterService(&Websocket_ServiceDesc, srv)
}

func _Websocket_YoutubeAddSongToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YoutubeAddSongToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).YoutubeAddSongToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/YoutubeAddSongToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).YoutubeAddSongToQueue(ctx, req.(*YoutubeAddSongToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_YoutubeRemoveSongToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YoutubeRemoveSongFromQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).YoutubeRemoveSongToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/YoutubeRemoveSongToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).YoutubeRemoveSongToQueue(ctx, req.(*YoutubeRemoveSongFromQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsSetScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsSetSceneMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsSetScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsSetScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsSetScene(ctx, req.(*ObsSetSceneMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsToggleSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsToggleSourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsToggleSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsToggleSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsToggleSource(ctx, req.(*ObsToggleSourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsToggleAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsToggleAudioMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsToggleAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsToggleAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsToggleAudio(ctx, req.(*ObsToggleAudioMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioSetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioSetVolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioSetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsAudioSetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioSetVolume(ctx, req.(*ObsAudioSetVolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioIncreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioIncreaseVolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioIncreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsAudioIncreaseVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioIncreaseVolume(ctx, req.(*ObsAudioIncreaseVolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioDecreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioDecreaseVolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioDecreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsAudioDecreaseVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioDecreaseVolume(ctx, req.(*ObsAudioDecreaseVolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioDisableOrEnableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsAudioEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioEnable(ctx, req.(*ObsAudioDisableOrEnableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioDisableOrEnableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsAudioDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioDisable(ctx, req.(*ObsAudioDisableOrEnableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsStopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsStopOrStartStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsStopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsStopStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsStopStream(ctx, req.(*ObsStopOrStartStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsStartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsStopOrStartStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsStartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/ObsStartStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsStartStream(ctx, req.(*ObsStopOrStartStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TextToSpeechSay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTSMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TextToSpeechSay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/TextToSpeechSay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TextToSpeechSay(ctx, req.(*TTSMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TextToSpeechSkip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTSSkipMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TextToSpeechSkip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websockets.Websocket/TextToSpeechSkip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TextToSpeechSkip(ctx, req.(*TTSSkipMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Websocket_ServiceDesc is the grpc.ServiceDesc for Websocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Websocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websockets.Websocket",
	HandlerType: (*WebsocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "YoutubeAddSongToQueue",
			Handler:    _Websocket_YoutubeAddSongToQueue_Handler,
		},
		{
			MethodName: "YoutubeRemoveSongToQueue",
			Handler:    _Websocket_YoutubeRemoveSongToQueue_Handler,
		},
		{
			MethodName: "ObsSetScene",
			Handler:    _Websocket_ObsSetScene_Handler,
		},
		{
			MethodName: "ObsToggleSource",
			Handler:    _Websocket_ObsToggleSource_Handler,
		},
		{
			MethodName: "ObsToggleAudio",
			Handler:    _Websocket_ObsToggleAudio_Handler,
		},
		{
			MethodName: "ObsAudioSetVolume",
			Handler:    _Websocket_ObsAudioSetVolume_Handler,
		},
		{
			MethodName: "ObsAudioIncreaseVolume",
			Handler:    _Websocket_ObsAudioIncreaseVolume_Handler,
		},
		{
			MethodName: "ObsAudioDecreaseVolume",
			Handler:    _Websocket_ObsAudioDecreaseVolume_Handler,
		},
		{
			MethodName: "ObsAudioEnable",
			Handler:    _Websocket_ObsAudioEnable_Handler,
		},
		{
			MethodName: "ObsAudioDisable",
			Handler:    _Websocket_ObsAudioDisable_Handler,
		},
		{
			MethodName: "ObsStopStream",
			Handler:    _Websocket_ObsStopStream_Handler,
		},
		{
			MethodName: "ObsStartStream",
			Handler:    _Websocket_ObsStartStream_Handler,
		},
		{
			MethodName: "TextToSpeechSay",
			Handler:    _Websocket_TextToSpeechSay_Handler,
		},
		{
			MethodName: "TextToSpeechSkip",
			Handler:    _Websocket_TextToSpeechSkip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websockets.proto",
}
