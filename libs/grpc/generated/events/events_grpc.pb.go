// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	Follow(ctx context.Context, in *FollowMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubGift(ctx context.Context, in *SubGiftMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReSubscribe(ctx context.Context, in *ReSubscribeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RedemptionCreated(ctx context.Context, in *RedemptionCreatedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CommandUsed(ctx context.Context, in *CommandUsedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FirstUserMessage(ctx context.Context, in *FirstUserMessageMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Raided(ctx context.Context, in *RaidedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TitleOrCategoryChanged(ctx context.Context, in *TitleOrCategoryChangedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StreamOnline(ctx context.Context, in *StreamOnlineMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StreamOffline(ctx context.Context, in *StreamOfflineMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChatClear(ctx context.Context, in *ChatClearMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Donate(ctx context.Context, in *DonateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	KeywordMatched(ctx context.Context, in *KeywordMatchedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GreetingSended(ctx context.Context, in *GreetingSendedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Follow(ctx context.Context, in *FollowMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Subscribe(ctx context.Context, in *SubscribeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) SubGift(ctx context.Context, in *SubGiftMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/SubGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) ReSubscribe(ctx context.Context, in *ReSubscribeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/ReSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) RedemptionCreated(ctx context.Context, in *RedemptionCreatedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/RedemptionCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CommandUsed(ctx context.Context, in *CommandUsedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/CommandUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) FirstUserMessage(ctx context.Context, in *FirstUserMessageMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/FirstUserMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Raided(ctx context.Context, in *RaidedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/Raided", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) TitleOrCategoryChanged(ctx context.Context, in *TitleOrCategoryChangedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/TitleOrCategoryChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) StreamOnline(ctx context.Context, in *StreamOnlineMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/StreamOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) StreamOffline(ctx context.Context, in *StreamOfflineMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/StreamOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) ChatClear(ctx context.Context, in *ChatClearMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/ChatClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Donate(ctx context.Context, in *DonateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/Donate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) KeywordMatched(ctx context.Context, in *KeywordMatchedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/KeywordMatched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GreetingSended(ctx context.Context, in *GreetingSendedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/events.Events/GreetingSended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	Follow(context.Context, *FollowMessage) (*emptypb.Empty, error)
	Subscribe(context.Context, *SubscribeMessage) (*emptypb.Empty, error)
	SubGift(context.Context, *SubGiftMessage) (*emptypb.Empty, error)
	ReSubscribe(context.Context, *ReSubscribeMessage) (*emptypb.Empty, error)
	RedemptionCreated(context.Context, *RedemptionCreatedMessage) (*emptypb.Empty, error)
	CommandUsed(context.Context, *CommandUsedMessage) (*emptypb.Empty, error)
	FirstUserMessage(context.Context, *FirstUserMessageMessage) (*emptypb.Empty, error)
	Raided(context.Context, *RaidedMessage) (*emptypb.Empty, error)
	TitleOrCategoryChanged(context.Context, *TitleOrCategoryChangedMessage) (*emptypb.Empty, error)
	StreamOnline(context.Context, *StreamOnlineMessage) (*emptypb.Empty, error)
	StreamOffline(context.Context, *StreamOfflineMessage) (*emptypb.Empty, error)
	ChatClear(context.Context, *ChatClearMessage) (*emptypb.Empty, error)
	Donate(context.Context, *DonateMessage) (*emptypb.Empty, error)
	KeywordMatched(context.Context, *KeywordMatchedMessage) (*emptypb.Empty, error)
	GreetingSended(context.Context, *GreetingSendedMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) Follow(context.Context, *FollowMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedEventsServer) Subscribe(context.Context, *SubscribeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventsServer) SubGift(context.Context, *SubGiftMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubGift not implemented")
}
func (UnimplementedEventsServer) ReSubscribe(context.Context, *ReSubscribeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSubscribe not implemented")
}
func (UnimplementedEventsServer) RedemptionCreated(context.Context, *RedemptionCreatedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedemptionCreated not implemented")
}
func (UnimplementedEventsServer) CommandUsed(context.Context, *CommandUsedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUsed not implemented")
}
func (UnimplementedEventsServer) FirstUserMessage(context.Context, *FirstUserMessageMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirstUserMessage not implemented")
}
func (UnimplementedEventsServer) Raided(context.Context, *RaidedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Raided not implemented")
}
func (UnimplementedEventsServer) TitleOrCategoryChanged(context.Context, *TitleOrCategoryChangedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitleOrCategoryChanged not implemented")
}
func (UnimplementedEventsServer) StreamOnline(context.Context, *StreamOnlineMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamOnline not implemented")
}
func (UnimplementedEventsServer) StreamOffline(context.Context, *StreamOfflineMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamOffline not implemented")
}
func (UnimplementedEventsServer) ChatClear(context.Context, *ChatClearMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatClear not implemented")
}
func (UnimplementedEventsServer) Donate(context.Context, *DonateMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donate not implemented")
}
func (UnimplementedEventsServer) KeywordMatched(context.Context, *KeywordMatchedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeywordMatched not implemented")
}
func (UnimplementedEventsServer) GreetingSended(context.Context, *GreetingSendedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetingSended not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Follow(ctx, req.(*FollowMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Subscribe(ctx, req.(*SubscribeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_SubGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubGiftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).SubGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/SubGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).SubGift(ctx, req.(*SubGiftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_ReSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSubscribeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).ReSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/ReSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).ReSubscribe(ctx, req.(*ReSubscribeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_RedemptionCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedemptionCreatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).RedemptionCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/RedemptionCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).RedemptionCreated(ctx, req.(*RedemptionCreatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CommandUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUsedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CommandUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/CommandUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CommandUsed(ctx, req.(*CommandUsedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_FirstUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstUserMessageMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FirstUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FirstUserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FirstUserMessage(ctx, req.(*FirstUserMessageMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Raided_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Raided(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/Raided",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Raided(ctx, req.(*RaidedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_TitleOrCategoryChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleOrCategoryChangedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).TitleOrCategoryChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/TitleOrCategoryChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).TitleOrCategoryChanged(ctx, req.(*TitleOrCategoryChangedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_StreamOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamOnlineMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).StreamOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/StreamOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).StreamOnline(ctx, req.(*StreamOnlineMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_StreamOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamOfflineMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).StreamOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/StreamOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).StreamOffline(ctx, req.(*StreamOfflineMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_ChatClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatClearMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).ChatClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/ChatClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).ChatClear(ctx, req.(*ChatClearMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Donate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Donate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/Donate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Donate(ctx, req.(*DonateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_KeywordMatched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordMatchedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).KeywordMatched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/KeywordMatched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).KeywordMatched(ctx, req.(*KeywordMatchedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GreetingSended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingSendedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GreetingSended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/GreetingSended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GreetingSended(ctx, req.(*GreetingSendedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _Events_Follow_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Events_Subscribe_Handler,
		},
		{
			MethodName: "SubGift",
			Handler:    _Events_SubGift_Handler,
		},
		{
			MethodName: "ReSubscribe",
			Handler:    _Events_ReSubscribe_Handler,
		},
		{
			MethodName: "RedemptionCreated",
			Handler:    _Events_RedemptionCreated_Handler,
		},
		{
			MethodName: "CommandUsed",
			Handler:    _Events_CommandUsed_Handler,
		},
		{
			MethodName: "FirstUserMessage",
			Handler:    _Events_FirstUserMessage_Handler,
		},
		{
			MethodName: "Raided",
			Handler:    _Events_Raided_Handler,
		},
		{
			MethodName: "TitleOrCategoryChanged",
			Handler:    _Events_TitleOrCategoryChanged_Handler,
		},
		{
			MethodName: "StreamOnline",
			Handler:    _Events_StreamOnline_Handler,
		},
		{
			MethodName: "StreamOffline",
			Handler:    _Events_StreamOffline_Handler,
		},
		{
			MethodName: "ChatClear",
			Handler:    _Events_ChatClear_Handler,
		},
		{
			MethodName: "Donate",
			Handler:    _Events_Donate_Handler,
		},
		{
			MethodName: "KeywordMatched",
			Handler:    _Events_KeywordMatched_Handler,
		},
		{
			MethodName: "GreetingSended",
			Handler:    _Events_GreetingSended_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}
