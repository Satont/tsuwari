// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: timers.proto

package timers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimersClient is the client API for Timers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimersClient interface {
	AddTimerToQueue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveTimerFromQueue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type timersClient struct {
	cc grpc.ClientConnInterface
}

func NewTimersClient(cc grpc.ClientConnInterface) TimersClient {
	return &timersClient{cc}
}

func (c *timersClient) AddTimerToQueue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timers.Timers/AddTimerToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timersClient) RemoveTimerFromQueue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/timers.Timers/RemoveTimerFromQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimersServer is the server API for Timers service.
// All implementations must embed UnimplementedTimersServer
// for forward compatibility
type TimersServer interface {
	AddTimerToQueue(context.Context, *Request) (*emptypb.Empty, error)
	RemoveTimerFromQueue(context.Context, *Request) (*emptypb.Empty, error)
	mustEmbedUnimplementedTimersServer()
}

// UnimplementedTimersServer must be embedded to have forward compatible implementations.
type UnimplementedTimersServer struct {
}

func (UnimplementedTimersServer) AddTimerToQueue(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimerToQueue not implemented")
}
func (UnimplementedTimersServer) RemoveTimerFromQueue(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTimerFromQueue not implemented")
}
func (UnimplementedTimersServer) mustEmbedUnimplementedTimersServer() {}

// UnsafeTimersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimersServer will
// result in compilation errors.
type UnsafeTimersServer interface {
	mustEmbedUnimplementedTimersServer()
}

func RegisterTimersServer(s grpc.ServiceRegistrar, srv TimersServer) {
	s.RegisterService(&Timers_ServiceDesc, srv)
}

func _Timers_AddTimerToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).AddTimerToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timers.Timers/AddTimerToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).AddTimerToQueue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timers_RemoveTimerFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimersServer).RemoveTimerFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timers.Timers/RemoveTimerFromQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimersServer).RemoveTimerFromQueue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Timers_ServiceDesc is the grpc.ServiceDesc for Timers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timers.Timers",
	HandlerType: (*TimersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTimerToQueue",
			Handler:    _Timers_AddTimerToQueue_Handler,
		},
		{
			MethodName: "RemoveTimerFromQueue",
			Handler:    _Timers_RemoveTimerFromQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timers.proto",
}
