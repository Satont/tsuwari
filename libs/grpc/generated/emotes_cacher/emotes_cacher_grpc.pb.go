// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: emotes_cacher.proto

package emotes_cacher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmotesCacherClient is the client API for EmotesCacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmotesCacherClient interface {
	CacheChannelEmotes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CacheGlobalEmotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type emotesCacherClient struct {
	cc grpc.ClientConnInterface
}

func NewEmotesCacherClient(cc grpc.ClientConnInterface) EmotesCacherClient {
	return &emotesCacherClient{cc}
}

func (c *emotesCacherClient) CacheChannelEmotes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/emotes_cacher.EmotesCacher/CacheChannelEmotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emotesCacherClient) CacheGlobalEmotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/emotes_cacher.EmotesCacher/CacheGlobalEmotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmotesCacherServer is the server API for EmotesCacher service.
// All implementations must embed UnimplementedEmotesCacherServer
// for forward compatibility
type EmotesCacherServer interface {
	CacheChannelEmotes(context.Context, *Request) (*emptypb.Empty, error)
	CacheGlobalEmotes(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmotesCacherServer()
}

// UnimplementedEmotesCacherServer must be embedded to have forward compatible implementations.
type UnimplementedEmotesCacherServer struct {
}

func (UnimplementedEmotesCacherServer) CacheChannelEmotes(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheChannelEmotes not implemented")
}
func (UnimplementedEmotesCacherServer) CacheGlobalEmotes(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheGlobalEmotes not implemented")
}
func (UnimplementedEmotesCacherServer) mustEmbedUnimplementedEmotesCacherServer() {}

// UnsafeEmotesCacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmotesCacherServer will
// result in compilation errors.
type UnsafeEmotesCacherServer interface {
	mustEmbedUnimplementedEmotesCacherServer()
}

func RegisterEmotesCacherServer(s grpc.ServiceRegistrar, srv EmotesCacherServer) {
	s.RegisterService(&EmotesCacher_ServiceDesc, srv)
}

func _EmotesCacher_CacheChannelEmotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmotesCacherServer).CacheChannelEmotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emotes_cacher.EmotesCacher/CacheChannelEmotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmotesCacherServer).CacheChannelEmotes(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmotesCacher_CacheGlobalEmotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmotesCacherServer).CacheGlobalEmotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emotes_cacher.EmotesCacher/CacheGlobalEmotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmotesCacherServer).CacheGlobalEmotes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EmotesCacher_ServiceDesc is the grpc.ServiceDesc for EmotesCacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmotesCacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emotes_cacher.EmotesCacher",
	HandlerType: (*EmotesCacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheChannelEmotes",
			Handler:    _EmotesCacher_CacheChannelEmotes_Handler,
		},
		{
			MethodName: "CacheGlobalEmotes",
			Handler:    _EmotesCacher_CacheGlobalEmotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emotes_cacher.proto",
}
