// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  channel       Channel?
  commandUsages CommandUsage[]
  stats         UserStats[]
  token         Token?         @relation(fields: [tokenId], references: [id])
  tokenId       String?        @unique

  isTester   Boolean @default(false)
  isBotAdmin Boolean @default(false)

  dashboardAccess       DashboardAccess[]
  permits               Permit[]
  personalNotifications Notification[]
  viewedNotifications   ViewedNotification[]
  files                 File[]

  @@map("users")
}

model UserStats {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  userId    String
  channelId String
  messages  Int    @default(0)
  watched   BigInt @default(0)

  user    User    @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])

  @@unique([userId, channelId])
  @@map("users_stats")
}

model Channel {
  id String @id

  isEnabled      Boolean @default(true)
  isTwitchBanned Boolean @default(false)
  isBanned       Boolean @default(false)

  botId String

  user User @relation(fields: [id], references: [id])
  bot  Bot  @relation(fields: [botId], references: [id])

  commands           Command[]
  timers             Timer[]
  greetings          Greeting[]
  usersStats         UserStats[]
  integrations       ChannelIntegration[]
  moderationSettings ModerationSettings[]
  dashboardAccess    DashboardAccess[]
  permits            Permit[]
  keywords           Keyword[]
  customVar          CustomVar[]
  dotaAccounts       DotaAccount[]

  @@map("channels")
}

model DashboardAccess {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("channels_dashboard_access")
}

enum IntegrationService {
  LASTFM
  VK
  FACEIT
  SPOTIFY
  DONATIONALERTS
}

model Integration {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  service IntegrationService

  accessToken  String?
  refreshToken String?

  clientId     String?
  clientSecret String?

  apiKey String?

  redirectUrl String?

  channelsIntegrations ChannelIntegration[]

  @@map("integrations")
}

model ChannelIntegration {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  enabled       Boolean     @default(false)
  channel       Channel     @relation(fields: [channelId], references: [id])
  channelId     String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId String

  accessToken  String?
  refreshToken String?

  clientId     String?
  clientSecret String?

  apiKey String?

  data Json?

  @@map("channels_integrations")
}

enum BotType {
  DEFAULT
  CUSTOM
}

model Bot {
  id String @id

  type BotType

  token   Token?  @relation(fields: [tokenId], references: [id])
  tokenId String? @unique

  channels Channel[]

  @@map("bots")
}

enum CommandPermission {
  BROADCASTER
  MODERATOR
  SUBSCRIBER
  VIP
  VIEWER
  FOLLOWER
}

enum CooldownType {
  GLOBAL
  PER_USER
}

enum CommandModule {
  CUSTOM
  DOTA
  CHANNEL
  MODERATION
}

model Command {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  name         String
  cooldown     Int?              @default(0)
  cooldownType CooldownType      @default(GLOBAL)
  enabled      Boolean           @default(true)
  aliases      Json?             @default("[]")
  description  String?
  visible      Boolean           @default(true)
  channelId    String
  permission   CommandPermission
  default      Boolean           @default(false)
  module       CommandModule     @default(CUSTOM)

  channel   Channel        @relation(fields: [channelId], references: [id])
  responses Response[]
  usages    CommandUsage[]

  defaultName String?

  @@unique([name, channelId])
  @@index([channelId])
  @@index([name])
  @@map("channels_commands")
}

model Response {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  text      String?
  commandId String

  command Command @relation(fields: [commandId], references: [id], onDelete: Cascade)

  @@map("channels_commands_responses")
}

model CommandUsage {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  userId    String
  channelId String
  commandId String

  user    User    @relation(fields: [userId], references: [id])
  command Command @relation(fields: [commandId], references: [id], onDelete: Cascade)

  @@map("channels_commands_usages")
}

model Timer {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  channelId String
  name      String  @db.VarChar(255)
  enabled   Boolean @default(true)
  responses Json    @default("[]")
  last      Int     @default(0)

  timeInterval    Int @default(0)
  messageInterval Int @default(0)

  lastTriggerMessageNumber Int @default(0)

  channel Channel @relation(fields: [channelId], references: [id])

  @@map("channels_timers")
}

model Token {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  accessToken         String
  refreshToken        String
  expiresIn           Int
  obtainmentTimestamp DateTime

  bot  Bot?
  user User?

  @@map("tokens")
}

model Greeting {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  channelId String
  userId    String
  enabled   Boolean @default(true)

  text String

  channel Channel @relation(fields: [channelId], references: [id])

  @@map("channels_greetings")
}

enum SettingsType {
  links
  blacklists
  symbols
  longMessage
  caps
  emotes
}

model ModerationSettings {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  type        SettingsType
  channelId   String
  enabled     Boolean      @default(false)
  subscribers Boolean      @default(false)
  vips        Boolean      @default(false)

  banTime        Int     @default(600)
  banMessage     String?
  warningMessage String?

  checkClips    Boolean? @default(false)
  triggerLength Int?     @default(300)
  maxPercentage Int?     @default(50)

  blackListSentences Json? @default("[]")

  channel Channel @relation(fields: [channelId], references: [id])

  @@unique([channelId, type])
  @@map("channels_moderation_settings")
}

model Permit {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  channel   Channel @relation(fields: [channelId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  userId    String

  @@map("channels_permits")
}

model Keyword {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  channelId String
  text      String
  response  String
  enabled   Boolean @default(true)
  cooldown  Int?    @default(0)

  channel Channel @relation(fields: [channelId], references: [id])

  @@unique([channelId, text])
  @@map("channels_keywords")
}

enum CustomVarType {
  SCRIPT
  TEXT
}

model CustomVar {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  name        String
  description String?
  type        CustomVarType
  evalValue   String?
  response    String?
  channelId   String

  channel Channel @relation(fields: [channelId], references: [id])

  @@map("channels_customvars")
}

model Notification {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  imageSrc  String?
  createdAt DateTime @default(now())
  userId    String?

  user                User?                 @relation(fields: [userId], references: [id])
  messages            NotificationMessage[]
  viewedNotifications ViewedNotification[]

  @@map("notifications")
}

enum LangCode {
  RU
  GB
}

model NotificationMessage {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  text           String
  title          String?
  langCode       LangCode
  notificationId String

  Notification Notification @relation(fields: [notificationId], references: [id])

  @@map("notifications_messages")
}

model ViewedNotification {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  userId         String
  notificationId String

  createdAt DateTime @default(now())

  notification Notification @relation(fields: [notificationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("users_viewed_notifications")
}

model DotaAccount {
  id        String
  channelId String

  channel Channel @relation(fields: [channelId], references: [id])

  @@id([id, channelId])
  @@unique([id, channelId])
  @@index(id)
  @@map("channels_dota_accounts")
}

model DotaHero {
  id   Int    @id @unique
  name String

  @@map("dota_heroes")
}

model DotaMode {
  id   Int    @id
  name String

  matches DotaMatch[]

  @@map("dota_game_modes")
}

model DotaMedals {
  rank_tier String @id
  name      String

  @@index([rank_tier])
  @@map("dota_medals")
}

model DotaMatch {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  startedAt                     DateTime
  lobby_type                    Int
  gameModeId                    Int
  players                       Int[]
  players_heroes                Int[]
  weekend_tourney_bracket_round String?
  weekend_tourney_skill_level   String?
  match_id                      String                 @unique
  avarage_mmr                   Int
  lobbyId                       String
  finished                      Boolean                @default(false)
  result                        DotaMatchResult?
  playersCards                  DotaMatchProfileCard[]

  gameMode DotaMode @relation(fields: [gameModeId], references: [id])

  @@map("dota_matches")
}

model DotaMatchResult {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  match_id    String  @unique
  players     Json
  radiant_win Boolean
  game_mode   Int

  match DotaMatch @relation(fields: [match_id], references: [match_id])

  @@map("dota_matches_results")
}

model DotaMatchProfileCard {
  id               String @id @default(dbgenerated("gen_random_uuid()"))
  match_id         String
  account_id       String
  rank_tier        Int?
  leaderboard_rank Int?

  match DotaMatch @relation(fields: [match_id], references: [id])

  @@unique([match_id, account_id])
  @@map("dota_matches_cards")
}

model File {
  id     String  @id @default(dbgenerated("gen_random_uuid()"))
  name   String
  size   Int
  type   String
  userId String?

  user User? @relation(fields: [userId], references: [id])

  @@map("users_files")
}
